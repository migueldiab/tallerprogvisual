'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.832
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("dsLog"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsLog
    Inherits System.Data.DataSet
    
    Private tableRegistroLogs As RegistroLogsDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RegistroLogs")) Is Nothing) Then
                MyBase.Tables.Add(New RegistroLogsDataTable(ds.Tables("RegistroLogs")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegistroLogs() As RegistroLogsDataTable
        Get
            Return Me.tableRegistroLogs
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As dsLog = CType(MyBase.Clone,dsLog)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("RegistroLogs")) Is Nothing) Then
                MyBase.Tables.Add(New RegistroLogsDataTable(ds.Tables("RegistroLogs")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableRegistroLogs = CType(MyBase.Tables("RegistroLogs"),RegistroLogsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegistroLogs) Is Nothing) Then
                Me.tableRegistroLogs.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsLog"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsLog.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableRegistroLogs = New RegistroLogsDataTable
        MyBase.Tables.Add(Me.tableRegistroLogs)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRegistroLogs() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsLog = New dsLog
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub RegistroLogsRowChangeEventHandler(ByVal sender As Object, ByVal e As RegistroLogsRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegistroLogsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As System.Data.DataColumn
        
        Private columnIdTipoEntradaEvento As System.Data.DataColumn
        
        Private columnNombreMaquina As System.Data.DataColumn
        
        Private columnOrigenEvento As System.Data.DataColumn
        
        Private columnNombreUsuario As System.Data.DataColumn
        
        Private columnCategory As System.Data.DataColumn
        
        Private columnHoraEscritura As System.Data.DataColumn
        
        Private columnHoraGenerado As System.Data.DataColumn
        
        Private columnMensaje As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegistroLogs"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdTipoEntradaEventoColumn() As System.Data.DataColumn
            Get
                Return Me.columnIdTipoEntradaEvento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreMaquinaColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombreMaquina
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrigenEventoColumn() As System.Data.DataColumn
            Get
                Return Me.columnOrigenEvento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CategoryColumn() As System.Data.DataColumn
            Get
                Return Me.columnCategory
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraEscrituraColumn() As System.Data.DataColumn
            Get
                Return Me.columnHoraEscritura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraGeneradoColumn() As System.Data.DataColumn
            Get
                Return Me.columnHoraGenerado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MensajeColumn() As System.Data.DataColumn
            Get
                Return Me.columnMensaje
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegistroLogsRow
            Get
                Return CType(Me.Rows(index),RegistroLogsRow)
            End Get
        End Property
        
        Public Event RegistroLogsRowChanging As RegistroLogsRowChangeEventHandler
        
        Public Event RegistroLogsRowChanged As RegistroLogsRowChangeEventHandler
        
        Public Event RegistroLogsRowDeleting As RegistroLogsRowChangeEventHandler
        
        Public Event RegistroLogsRowDeleted As RegistroLogsRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRegistroLogsRow(ByVal row As RegistroLogsRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRegistroLogsRow(ByVal IdTipoEntradaEvento As Integer, ByVal NombreMaquina As String, ByVal OrigenEvento As String, ByVal NombreUsuario As String, ByVal Category As String, ByVal HoraEscritura As String, ByVal HoraGenerado As String, ByVal Mensaje As String) As RegistroLogsRow
            Dim rowRegistroLogsRow As RegistroLogsRow = CType(Me.NewRow,RegistroLogsRow)
            rowRegistroLogsRow.ItemArray = New Object() {Nothing, IdTipoEntradaEvento, NombreMaquina, OrigenEvento, NombreUsuario, Category, HoraEscritura, HoraGenerado, Mensaje}
            Me.Rows.Add(rowRegistroLogsRow)
            Return rowRegistroLogsRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Integer) As RegistroLogsRow
            Return CType(Me.Rows.Find(New Object() {Id}),RegistroLogsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As RegistroLogsDataTable = CType(MyBase.Clone,RegistroLogsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New RegistroLogsDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnIdTipoEntradaEvento = MyBase.Columns("IdTipoEntradaEvento")
            Me.columnNombreMaquina = MyBase.Columns("NombreMaquina")
            Me.columnOrigenEvento = MyBase.Columns("OrigenEvento")
            Me.columnNombreUsuario = MyBase.Columns("NombreUsuario")
            Me.columnCategory = MyBase.Columns("Category")
            Me.columnHoraEscritura = MyBase.Columns("HoraEscritura")
            Me.columnHoraGenerado = MyBase.Columns("HoraGenerado")
            Me.columnMensaje = MyBase.Columns("Mensaje")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New System.Data.DataColumn("Id", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnIdTipoEntradaEvento = New System.Data.DataColumn("IdTipoEntradaEvento", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdTipoEntradaEvento)
            Me.columnNombreMaquina = New System.Data.DataColumn("NombreMaquina", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreMaquina)
            Me.columnOrigenEvento = New System.Data.DataColumn("OrigenEvento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigenEvento)
            Me.columnNombreUsuario = New System.Data.DataColumn("NombreUsuario", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuario)
            Me.columnCategory = New System.Data.DataColumn("Category", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategory)
            Me.columnHoraEscritura = New System.Data.DataColumn("HoraEscritura", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoraEscritura)
            Me.columnHoraGenerado = New System.Data.DataColumn("HoraGenerado", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHoraGenerado)
            Me.columnMensaje = New System.Data.DataColumn("Mensaje", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMensaje)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
            Me.columnNombreMaquina.MaxLength = 255
            Me.columnOrigenEvento.MaxLength = 255
            Me.columnNombreUsuario.MaxLength = 255
            Me.columnCategory.MaxLength = 255
            Me.columnHoraEscritura.MaxLength = 255
            Me.columnHoraGenerado.MaxLength = 255
            Me.columnMensaje.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRegistroLogsRow() As RegistroLogsRow
            Return CType(Me.NewRow,RegistroLogsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New RegistroLogsRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RegistroLogsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegistroLogsRowChangedEvent) Is Nothing) Then
                RaiseEvent RegistroLogsRowChanged(Me, New RegistroLogsRowChangeEvent(CType(e.Row,RegistroLogsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegistroLogsRowChangingEvent) Is Nothing) Then
                RaiseEvent RegistroLogsRowChanging(Me, New RegistroLogsRowChangeEvent(CType(e.Row,RegistroLogsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegistroLogsRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegistroLogsRowDeleted(Me, New RegistroLogsRowChangeEvent(CType(e.Row,RegistroLogsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegistroLogsRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegistroLogsRowDeleting(Me, New RegistroLogsRowChangeEvent(CType(e.Row,RegistroLogsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRegistroLogsRow(ByVal row As RegistroLogsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsLog = New dsLog
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegistroLogsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RegistroLogsRow
        Inherits System.Data.DataRow
        
        Private tableRegistroLogs As RegistroLogsDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegistroLogs = CType(Me.Table,RegistroLogsDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tableRegistroLogs.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableRegistroLogs.IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdTipoEntradaEvento() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRegistroLogs.IdTipoEntradaEventoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'IdTipoEntradaEvento' in table 'RegistroLogs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistroLogs.IdTipoEntradaEventoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreMaquina() As String
            Get
                Try 
                    Return CType(Me(Me.tableRegistroLogs.NombreMaquinaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'NombreMaquina' in table 'RegistroLogs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistroLogs.NombreMaquinaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrigenEvento() As String
            Get
                Try 
                    Return CType(Me(Me.tableRegistroLogs.OrigenEventoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'OrigenEvento' in table 'RegistroLogs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistroLogs.OrigenEventoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuario() As String
            Get
                Try 
                    Return CType(Me(Me.tableRegistroLogs.NombreUsuarioColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'NombreUsuario' in table 'RegistroLogs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistroLogs.NombreUsuarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Category() As String
            Get
                Try 
                    Return CType(Me(Me.tableRegistroLogs.CategoryColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Category' in table 'RegistroLogs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistroLogs.CategoryColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HoraEscritura() As String
            Get
                Try 
                    Return CType(Me(Me.tableRegistroLogs.HoraEscrituraColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'HoraEscritura' in table 'RegistroLogs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistroLogs.HoraEscrituraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HoraGenerado() As String
            Get
                Try 
                    Return CType(Me(Me.tableRegistroLogs.HoraGeneradoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'HoraGenerado' in table 'RegistroLogs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistroLogs.HoraGeneradoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mensaje() As String
            Get
                Try 
                    Return CType(Me(Me.tableRegistroLogs.MensajeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Mensaje' in table 'RegistroLogs' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegistroLogs.MensajeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdTipoEntradaEventoNull() As Boolean
            Return Me.IsNull(Me.tableRegistroLogs.IdTipoEntradaEventoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdTipoEntradaEventoNull()
            Me(Me.tableRegistroLogs.IdTipoEntradaEventoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreMaquinaNull() As Boolean
            Return Me.IsNull(Me.tableRegistroLogs.NombreMaquinaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreMaquinaNull()
            Me(Me.tableRegistroLogs.NombreMaquinaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigenEventoNull() As Boolean
            Return Me.IsNull(Me.tableRegistroLogs.OrigenEventoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigenEventoNull()
            Me(Me.tableRegistroLogs.OrigenEventoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreUsuarioNull() As Boolean
            Return Me.IsNull(Me.tableRegistroLogs.NombreUsuarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreUsuarioNull()
            Me(Me.tableRegistroLogs.NombreUsuarioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategoryNull() As Boolean
            Return Me.IsNull(Me.tableRegistroLogs.CategoryColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategoryNull()
            Me(Me.tableRegistroLogs.CategoryColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHoraEscrituraNull() As Boolean
            Return Me.IsNull(Me.tableRegistroLogs.HoraEscrituraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHoraEscrituraNull()
            Me(Me.tableRegistroLogs.HoraEscrituraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHoraGeneradoNull() As Boolean
            Return Me.IsNull(Me.tableRegistroLogs.HoraGeneradoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHoraGeneradoNull()
            Me(Me.tableRegistroLogs.HoraGeneradoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMensajeNull() As Boolean
            Return Me.IsNull(Me.tableRegistroLogs.MensajeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMensajeNull()
            Me(Me.tableRegistroLogs.MensajeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RegistroLogsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As RegistroLogsRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RegistroLogsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RegistroLogsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsLogTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RegistroLogsTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RegistroLogs"
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("IdTipoEntradaEvento", "IdTipoEntradaEvento")
            tableMapping.ColumnMappings.Add("NombreMaquina", "NombreMaquina")
            tableMapping.ColumnMappings.Add("OrigenEvento", "OrigenEvento")
            tableMapping.ColumnMappings.Add("NombreUsuario", "NombreUsuario")
            tableMapping.ColumnMappings.Add("Category", "Category")
            tableMapping.ColumnMappings.Add("HoraEscritura", "HoraEscritura")
            tableMapping.ColumnMappings.Add("HoraGenerado", "HoraGenerado")
            tableMapping.ColumnMappings.Add("Mensaje", "Mensaje")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `RegistroLogs` WHERE ((`Id` = ?) AND ((? = 1 AND `IdTipoEntradaEvento"& _ 
                "` IS NULL) OR (`IdTipoEntradaEvento` = ?)) AND ((? = 1 AND `NombreMaquina` IS NU"& _ 
                "LL) OR (`NombreMaquina` = ?)) AND ((? = 1 AND `OrigenEvento` IS NULL) OR (`Orige"& _ 
                "nEvento` = ?)) AND ((? = 1 AND `NombreUsuario` IS NULL) OR (`NombreUsuario` = ?)"& _ 
                ") AND ((? = 1 AND `Category` IS NULL) OR (`Category` = ?)) AND ((? = 1 AND `Hora"& _ 
                "Escritura` IS NULL) OR (`HoraEscritura` = ?)) AND ((? = 1 AND `HoraGenerado` IS "& _ 
                "NULL) OR (`HoraGenerado` = ?)) AND ((? = 1 AND `Mensaje` IS NULL) OR (`Mensaje` "& _ 
                "= ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Id", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Id", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_IdTipoEntradaEvento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IdTipoEntradaEvento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_IdTipoEntradaEvento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IdTipoEntradaEvento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_NombreMaquina", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreMaquina", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_NombreMaquina", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreMaquina", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OrigenEvento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OrigenEvento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OrigenEvento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OrigenEvento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_NombreUsuario", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreUsuario", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_NombreUsuario", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreUsuario", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Category", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Category", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Category", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Category", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_HoraEscritura", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraEscritura", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_HoraEscritura", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraEscritura", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_HoraGenerado", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraGenerado", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_HoraGenerado", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraGenerado", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Mensaje", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Mensaje", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Mensaje", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Mensaje", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `RegistroLogs` (`IdTipoEntradaEvento`, `NombreMaquina`, `OrigenEvento"& _ 
                "`, `NombreUsuario`, `Category`, `HoraEscritura`, `HoraGenerado`, `Mensaje`) VALU"& _ 
                "ES (?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IdTipoEntradaEvento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IdTipoEntradaEvento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("NombreMaquina", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreMaquina", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OrigenEvento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OrigenEvento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("NombreUsuario", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreUsuario", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Category", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Category", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("HoraEscritura", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraEscritura", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("HoraGenerado", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraGenerado", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Mensaje", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Mensaje", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `RegistroLogs` SET `IdTipoEntradaEvento` = ?, `NombreMaquina` = ?, `Origen"& _ 
                "Evento` = ?, `NombreUsuario` = ?, `Category` = ?, `HoraEscritura` = ?, `HoraGene"& _ 
                "rado` = ?, `Mensaje` = ? WHERE ((`Id` = ?) AND ((? = 1 AND `IdTipoEntradaEvento`"& _ 
                " IS NULL) OR (`IdTipoEntradaEvento` = ?)) AND ((? = 1 AND `NombreMaquina` IS NUL"& _ 
                "L) OR (`NombreMaquina` = ?)) AND ((? = 1 AND `OrigenEvento` IS NULL) OR (`Origen"& _ 
                "Evento` = ?)) AND ((? = 1 AND `NombreUsuario` IS NULL) OR (`NombreUsuario` = ?))"& _ 
                " AND ((? = 1 AND `Category` IS NULL) OR (`Category` = ?)) AND ((? = 1 AND `HoraE"& _ 
                "scritura` IS NULL) OR (`HoraEscritura` = ?)) AND ((? = 1 AND `HoraGenerado` IS N"& _ 
                "ULL) OR (`HoraGenerado` = ?)) AND ((? = 1 AND `Mensaje` IS NULL) OR (`Mensaje` ="& _ 
                " ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IdTipoEntradaEvento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IdTipoEntradaEvento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("NombreMaquina", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreMaquina", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OrigenEvento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OrigenEvento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("NombreUsuario", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreUsuario", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Category", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Category", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("HoraEscritura", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraEscritura", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("HoraGenerado", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraGenerado", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Mensaje", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Mensaje", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Id", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Id", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_IdTipoEntradaEvento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IdTipoEntradaEvento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_IdTipoEntradaEvento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "IdTipoEntradaEvento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_NombreMaquina", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreMaquina", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_NombreMaquina", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreMaquina", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OrigenEvento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OrigenEvento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OrigenEvento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OrigenEvento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_NombreUsuario", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreUsuario", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_NombreUsuario", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "NombreUsuario", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Category", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Category", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Category", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Category", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_HoraEscritura", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraEscritura", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_HoraEscritura", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraEscritura", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_HoraGenerado", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraGenerado", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_HoraGenerado", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "HoraGenerado", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Mensaje", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Mensaje", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Mensaje", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Mensaje", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.DAC.My.MySettings.Default.DBConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Id, IdTipoEntradaEvento, NombreMaquina, OrigenEvento, NombreUsuario, Categ"& _ 
                "ory, HoraEscritura, HoraGenerado, Mensaje FROM RegistroLogs"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsLog.RegistroLogsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsLog.RegistroLogsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsLog.RegistroLogsDataTable = New dsLog.RegistroLogsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As dsLog.RegistroLogsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As dsLog) As Integer
            Return Me.Adapter.Update(dataSet, "RegistroLogs")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Id As Integer, ByVal Original_IdTipoEntradaEvento As System.Nullable(Of Integer), ByVal Original_NombreMaquina As String, ByVal Original_OrigenEvento As String, ByVal Original_NombreUsuario As String, ByVal Original_Category As String, ByVal Original_HoraEscritura As String, ByVal Original_HoraGenerado As String, ByVal Original_Mensaje As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Id,Integer)
            If (Original_IdTipoEntradaEvento.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_IdTipoEntradaEvento.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_NombreMaquina Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_NombreMaquina,String)
            End If
            If (Original_OrigenEvento Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_OrigenEvento,String)
            End If
            If (Original_NombreUsuario Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_NombreUsuario,String)
            End If
            If (Original_Category Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Category,String)
            End If
            If (Original_HoraEscritura Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_HoraEscritura,String)
            End If
            If (Original_HoraGenerado Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_HoraGenerado,String)
            End If
            If (Original_Mensaje Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Mensaje,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal IdTipoEntradaEvento As System.Nullable(Of Integer), ByVal NombreMaquina As String, ByVal OrigenEvento As String, ByVal NombreUsuario As String, ByVal Category As String, ByVal HoraEscritura As String, ByVal HoraGenerado As String, ByVal Mensaje As String) As Integer
            If (IdTipoEntradaEvento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(IdTipoEntradaEvento.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (NombreMaquina Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(NombreMaquina,String)
            End If
            If (OrigenEvento Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(OrigenEvento,String)
            End If
            If (NombreUsuario Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(NombreUsuario,String)
            End If
            If (Category Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Category,String)
            End If
            If (HoraEscritura Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(HoraEscritura,String)
            End If
            If (HoraGenerado Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(HoraGenerado,String)
            End If
            If (Mensaje Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Mensaje,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal IdTipoEntradaEvento As System.Nullable(Of Integer),  _
                    ByVal NombreMaquina As String,  _
                    ByVal OrigenEvento As String,  _
                    ByVal NombreUsuario As String,  _
                    ByVal Category As String,  _
                    ByVal HoraEscritura As String,  _
                    ByVal HoraGenerado As String,  _
                    ByVal Mensaje As String,  _
                    ByVal Original_Id As Integer,  _
                    ByVal Original_IdTipoEntradaEvento As System.Nullable(Of Integer),  _
                    ByVal Original_NombreMaquina As String,  _
                    ByVal Original_OrigenEvento As String,  _
                    ByVal Original_NombreUsuario As String,  _
                    ByVal Original_Category As String,  _
                    ByVal Original_HoraEscritura As String,  _
                    ByVal Original_HoraGenerado As String,  _
                    ByVal Original_Mensaje As String) As Integer
            If (IdTipoEntradaEvento.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(IdTipoEntradaEvento.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (NombreMaquina Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(NombreMaquina,String)
            End If
            If (OrigenEvento Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(OrigenEvento,String)
            End If
            If (NombreUsuario Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(NombreUsuario,String)
            End If
            If (Category Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Category,String)
            End If
            If (HoraEscritura Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(HoraEscritura,String)
            End If
            If (HoraGenerado Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(HoraGenerado,String)
            End If
            If (Mensaje Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Mensaje,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Id,Integer)
            If (Original_IdTipoEntradaEvento.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_IdTipoEntradaEvento.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Original_NombreMaquina Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_NombreMaquina,String)
            End If
            If (Original_OrigenEvento Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_OrigenEvento,String)
            End If
            If (Original_NombreUsuario Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_NombreUsuario,String)
            End If
            If (Original_Category Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Category,String)
            End If
            If (Original_HoraEscritura Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_HoraEscritura,String)
            End If
            If (Original_HoraGenerado Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_HoraGenerado,String)
            End If
            If (Original_Mensaje Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Mensaje,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
